import Disposable from './Helpers/Disposable';
import { ShaderAttribute, ShaderUniform } from './GL/ShaderProgram';
import Texture from './GL/Texture';
import BindableObject from './Helpers/BindableObject';
import Null from './Helpers/Null';
import Storage from './Helpers/Storage';
import Matrix4x4 from './Math/Matrix4x4';
import Vector from './Math/Vector';
declare class Shader extends BindableObject<Shader> implements Disposable {
    private variants;
    private readonly parser;
    private textureIndices;
    private textureIndex;
    private variant;
    name: string;
    static floats: Storage<GLfloat>;
    static ints: Storage<GLint>;
    static vectors: Storage<Vector>;
    static matrices: Storage<Matrix4x4>;
    static textures: Storage<Texture>;
    readonly attributes: Storage<ShaderAttribute>;
    readonly uniforms: Storage<ShaderUniform>;
    keywords: Null<string[]>;
    protected readonly identifier: string;
    static readonly bound: Null<Shader>;
    static load(url: string): Promise<Shader>;
    apply(): void;
    setFloat(name: string, value: GLfloat): void;
    setInt(name: string, value: GLint): void;
    setMatrix4x4(name: string, value: Matrix4x4): void;
    setVector(name: string, value: Vector): void;
    setTexture(name: string, texture: Texture): void;
    static setFloat(name: string, value: number): void;
    static setInt(name: string, value: number): void;
    static setVector(name: string, value: Vector): void;
    static setMatrix4x4(name: string, value: Matrix4x4): void;
    static setTexture(name: string, value: Texture): void;
    afterBind(): void;
    dispose(): void;
    private uniformNotFound;
}
export default Shader;
